%!PS-Adobe-3.0
%%Title: lab3_code.c
%%For: Vladimir
%%Creator: a2ps version 4.14
%%CreationDate: Wed Nov  6 10:53:59 2019
%%BoundingBox: 24 24 588 768
%%DocumentData: Clean7Bit
%%Orientation: Landscape
%%Pages: 3
%%PageOrder: Ascend
%%DocumentMedia: Letter 612 792 0 () ()
%%DocumentNeededResources: font Courier
%%+ font Courier-Bold
%%+ font Courier-BoldOblique
%%+ font Courier-Oblique
%%+ font Helvetica
%%+ font Helvetica-Bold
%%+ font Symbol
%%+ font Times-Bold
%%+ font Times-Roman
%%DocumentProcessColors: Black 
%%DocumentSuppliedResources: procset a2ps-a2ps-hdr
%%+ procset a2ps-black+white-Prolog
%%+ encoding ISO-8859-1Encoding
%%EndComments
/a2psdict 200 dict def
a2psdict begin
%%BeginProlog
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Check PostScript language level.
/languagelevel where {
  pop /gs_languagelevel languagelevel def
} {
  /gs_languagelevel 1 def
} ifelse

% EPSF import as in the Red Book
/BeginInclude {
  /b4_Inc_state save def    		% Save state for cleanup
  /dict_count countdictstack def	% Count objects on dict stack
  /op_count count 1 sub def		% Count objects on operand stack 
  userdict begin
    0 setgray 0 setlinecap
    1 setlinewidth 0 setlinejoin
    10 setmiterlimit [ ] 0 setdash newpath
    gs_languagelevel 1 ne {
      false setstrokeadjust false setoverprint 
    } if
} bind def

/EndInclude {
  count op_count sub { pos } repeat	% Clean up stacks
  countdictstack dict_count sub { end } repeat
  b4_Inc_state restore
} bind def

/BeginEPSF {
  BeginInclude
  /showpage { } def
} bind def

/EndEPSF {
  EndInclude
} bind def

% Page prefeed
/page_prefeed {         % bool -> -
  statusdict /prefeed known {
    statusdict exch /prefeed exch put
  } {
    pop
  } ifelse
} bind def

/deffont {
  findfont exch scalefont def
} bind def

/reencode_font {
  findfont reencode 2 copy definefont pop def
} bind def

% Function c-show (str => -)
% centers text only according to x axis.
/c-show { 
  dup stringwidth pop
  2 div neg 0 rmoveto
  show
} bind def

% Function l-show (str => -)
% prints texts so that it ends at currentpoint
/l-show {
  dup stringwidth pop neg 
  0 
  rmoveto show
} bind def

% center-fit show (str w => -)
% show centered, and scale currentfont so that the width is less than w
/cfshow {
  exch dup stringwidth pop
  % If the title is too big, try to make it smaller
  3 2 roll 2 copy
  gt
  { % if, i.e. too big
    exch div
    currentfont exch scalefont setfont
  } { % ifelse
    pop pop 
  }
  ifelse
  c-show			% center title
} bind def

% Return the y size of the current font
% - => fontsize
/currentfontsize {
  currentfont /FontType get 0 eq {
    currentfont /FontMatrix get 3 get
  }{
    currentfont /FontMatrix get 3 get 1000 mul
  } ifelse
} bind def

% reencode the font
% <encoding-vector> <fontdict> -> <newfontdict>
/reencode { %def
  dup length 5 add dict begin
    { %forall
      % <vector> <key> <val>
      1 index /FID ne 
      { def }{ pop pop } ifelse
    } forall
    /Encoding exch def % -

    % Use the font's bounding box to determine the ascent, descent,
    % and overall height; don't forget that these values have to be
    % transformed using the font's matrix.
    % We use `load' because sometimes BBox is executable, sometimes not.
    % Since we need 4 numbers an not an array avoid BBox from being executed
    /FontBBox load aload pop
    FontMatrix transform /Ascent exch def pop
    FontMatrix transform /Descent exch def pop
    /FontHeight Ascent Descent sub def

    % Get the underline position and thickness if they're defined.
    % Use 1 if they are not defined.
    currentdict /FontInfo 2 copy known
    { get
      /UnderlinePosition 2 copy % <FontInfo> /UP <FontInfo> /UP
      2 copy known
      { get }{ pop pop 1 } ifelse
      0 exch FontMatrix transform exch pop
      def % <FontInfo>

      /UnderlineThickness 2 copy % <FontInfo> /UT <FontInfo> /UT
      2 copy known
      { get }{ pop pop 1 } ifelse
      0 exch FontMatrix transform exch pop
      def % <FontInfo>
      pop % -
    }{ pop pop
    } ifelse

    currentdict
  end 
} bind def

% composite fonts for ASCII-EUC mixed strings
% Version 1.2 1/31/1990
% Original Ken'ichi HANDA (handa@etl.go.jp)
% Modified Norio Katayama (katayama@rd.nacsis.ac.jp),1998
% Extend & Fix Koji Nakamaru (maru@on.cs.keio.ac.jp), 1999
% Anyone can freely copy, modify, distribute this program.

/copyfont {	% font-dic extra-entry-count  copyfont  font-dic
	1 index maxlength add dict begin
	{	1 index /FID ne 2 index /UniqueID ne and
		{def} {pop pop} ifelse
	} forall
	currentdict
	end
} bind def

/compositefont { % ASCIIFontName EUCFontName RomanScale RomanOffset Rot(T/F) compositefont font
    /RomanRotation exch def
    /RomanOffset exch def
    /RomanScale exch def
    userdict /fixeucfont_dict known not {
	userdict begin
	    /fixeucfont_dict 2 dict begin
		/UpperByteEncoding [
		    16#00 1 16#20 { pop 0 } for
		    16#21 1 16#28 { 16#20 sub } for
		    16#29 1 16#2F { pop 0 } for
		    16#30 1 16#74 { 16#27 sub } for
		    16#75 1 16#FF { pop 0 } for
		] def
	        /LowerByteEncoding [
		    16#00 1 16#A0 { pop /.notdef } for
		    16#A1 1 16#FE { 16#80 sub 16 2 string cvrs
				    (cXX) dup 1 4 -1 roll
				    putinterval cvn } for
		    /.notdef
		] def
		currentdict
	    end def
	end
    } if
    findfont dup /FontType get 0 eq {
	14 dict begin
	    %
	    % 7+8 bit EUC font
	    %
	    12 dict begin
		/EUCFont exch def
		/FontInfo (7+8 bit EUC font) readonly def
		/PaintType 0 def
		/FontType 0 def
		/FontMatrix matrix def
		% /FontName
		/Encoding fixeucfont_dict /UpperByteEncoding get def
		/FMapType 2 def
		EUCFont /WMode known
		{ EUCFont /WMode get /WMode exch def }
		{ /WMode 0 def } ifelse
		/FDepVector [
		    EUCFont /FDepVector get 0 get
		    [ 16#21 1 16#28 {} for 16#30 1 16#74 {} for ]
		    {
			13 dict begin
			    /EUCFont EUCFont def
			    /UpperByte exch 16#80 add def	
			    % /FontName
			    /FontInfo (EUC lower byte font) readonly def
			    /PaintType 0 def
			    /FontType 3 def
			    /FontMatrix matrix def
			    /FontBBox {0 0 0 0} def
			    /Encoding
				fixeucfont_dict /LowerByteEncoding get def
			    % /UniqueID
			    % /WMode
			    /BuildChar {
				gsave
				exch dup /EUCFont get setfont
				/UpperByte get
				2 string
				dup 0 4 -1 roll put
				dup 1 4 -1 roll put
				dup stringwidth setcharwidth
				0 0 moveto show
				grestore
			    } bind def
			    currentdict
			end
			/lowerbytefont exch definefont
		    } forall
		] def
		currentdict
	    end
	    /eucfont exch definefont
	    exch
	    findfont 1 copyfont dup begin
		RomanRotation {
			/FontMatrix FontMatrix
			[ 0 RomanScale neg RomanScale 0 RomanOffset neg 0 ]
			matrix concatmatrix def
		}{
			/FontMatrix FontMatrix
			[ RomanScale 0 0 RomanScale 0 RomanOffset ] matrix concatmatrix
			def
			/CDevProc
			    {pop pop pop pop 0 exch -1000 exch 2 div 880} def
		} ifelse
	    end
	    /asciifont exch definefont
	    exch
	    /FDepVector [ 4 2 roll ] def
	    /FontType 0 def
	    /WMode 0 def
	    /FMapType 4 def
	    /FontMatrix matrix def
	    /Encoding [0 1] def
	    /FontBBox {0 0 0 0} def
%	    /FontHeight 1.0 def % XXXX
	    /FontHeight RomanScale 1.0 ge { RomanScale }{ 1.0 } ifelse def
	    /Descent -0.3 def   % XXXX
	    currentdict
	end
	/tmpfont exch definefont
	pop
	/tmpfont findfont
    }{
	pop findfont 0 copyfont
    } ifelse
} def	

/slantfont {	% FontName slant-degree  slantfont  font'
    exch findfont 1 copyfont begin
    [ 1 0 4 -1 roll 1 0 0 ] FontMatrix exch matrix concatmatrix
    /FontMatrix exch def
    currentdict
    end
} def

% Function print line number (<string> # -)
/# {
  gsave
    sx cw mul neg 2 div 0 rmoveto
    f# setfont
    c-show
  grestore
} bind def

% -------- Some routines to enlight plain b/w printings ---------

% Underline
% width --
/dounderline {
  currentpoint
  gsave
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    0 rlineto
    stroke
  grestore
} bind def

% Underline a string
% string --
/dounderlinestring {
  stringwidth pop
  dounderline
} bind def

/UL {
  /ul exch store
} bind def

% Draw a box of WIDTH wrt current font
% width --
/dobox {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    stroke
  grestore
} bind def

/BX {
  /bx exch store
} bind def

% Box a string
% string --
/doboxstring {
  stringwidth pop
  dobox
} bind def

%
% ------------- Color routines ---------------
%
/FG /setrgbcolor load def

% Draw the background
% width --
/dobackground {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    bgcolor aload pop setrgbcolor
    fill
  grestore
} bind def

% Draw bg for a string
% string --
/dobackgroundstring {
  stringwidth pop
  dobackground
} bind def


/BG {
  dup /bg exch store
  { mark 4 1 roll ] /bgcolor exch store } if
} bind def


/Show {
  bg { dup dobackgroundstring } if
  ul { dup dounderlinestring } if
  bx { dup doboxstring } if
  show
} bind def

% Function T(ab), jumps to the n-th tabulation in the current line
/T {
  cw mul x0 add
  bg { dup currentpoint pop sub dobackground } if
  ul { dup currentpoint pop sub dounderline } if
  bx { dup currentpoint pop sub dobox } if
  y0 moveto
} bind def

% Function n: move to the next line
/n {
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

/S {
  Show
} bind def

%%BeginResource: procset a2ps-a2ps-hdr 2.0 2
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Function title: prints page header.
% <ct> <rt> <lt> are passed as argument
/title { 
  % 1. Draw the background
  x v get y v get moveto
  gsave
    0 th 2 div neg rmoveto 
    th setlinewidth
    0.95 setgray
    pw 0 rlineto stroke
  grestore
  % 2. Border it
  gsave
    0.7 setlinewidth
    pw 0 rlineto
    0 th neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
  % stk: ct rt lt
  x v get y v get th sub 1 add moveto
%%IncludeResource: font Helvetica
  fHelvetica fnfs 0.8 mul scalefont setfont
  % 3. The left title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    fnfs 0.8 mul hm rmoveto
    show			% left title
  grestore
  exch
  % stk: ct ltw rt
  % 4. the right title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    dup
    pw exch stringwidth pop fnfs 0.8 mul add sub
    hm
    rmoveto
    show			% right title
  grestore
  % stk: ct ltw rtw
  % 5. the center title
  gsave
    pw 3 1 roll
    % stk: ct pw ltw rtw
    3 copy 
    % Move to the center of the left room
    sub add 2 div hm rmoveto
    % What is the available space in here?
    add sub fnfs 0.8 mul sub fnfs 0.8 mul sub
    % stk: ct space_left
%%IncludeResource: font Helvetica-Bold
  fHelvetica-Bold fnfs scalefont setfont
    cfshow
  grestore
} bind def

% Function border: prints virtual page border
/border { %def
  gsave				% print four sides
    0 setgray
    x v get y v get moveto
    0.7 setlinewidth		% of the square
    pw 0 rlineto
    0 ph neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
} bind def

% Function water: prints a water mark in background
/water { %def
  gsave
    scx scy moveto rotate
%%IncludeResource: font Times-Bold
  fTimes-Bold 100 scalefont setfont
    .97 setgray
    dup stringwidth pop 2 div neg -50 rmoveto
    show
  grestore
} bind def

% Function rhead: prints the right header
/rhead {  %def
  lx ly moveto
  fHelvetica fnfs 0.8 mul scalefont setfont
  l-show
} bind def

% Function footer (cf rf lf -> -)
/footer {
  fHelvetica fnfs 0.8 mul scalefont setfont
  dx dy moveto
  show

  snx sny moveto
  l-show
  
  fnx fny moveto
  c-show
} bind def
%%EndResource
%%BeginResource: procset a2ps-black+white-Prolog 2.0 1

% Function T(ab), jumps to the n-th tabulation in the current line
/T { 
  cw mul x0 add y0 moveto
} bind def

% Function n: move to the next line
/n { %def
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
}  bind def

/S {
  Show
} bind def

/p {
  false UL
  false BX
  fCourier bfs scalefont setfont
  Show
} bind def

/sy {
  false UL
  false BX
  fSymbol bfs scalefont setfont
  Show
} bind def

/k {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/K {
  false UL
  false BX
  fCourier-Bold bfs scalefont setfont
  Show
} bind def

/c {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/C {
  false UL
  false BX
  fCourier-BoldOblique bfs scalefont setfont
  Show 
} bind def

/l {
  false UL
  false BX
  fHelvetica bfs scalefont setfont
  Show
} bind def

/L {
  false UL
  false BX
  fHelvetica-Bold bfs scalefont setfont
  Show 
} bind def

/str{
  false UL
  false BX
  fTimes-Roman bfs scalefont setfont
  Show
} bind def

/e{
  false UL
  true BX
  fHelvetica-Bold bfs scalefont setfont
  Show
} bind def

%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeResource: font Courier
%%IncludeResource: font Courier-Oblique
%%IncludeResource: font Courier-Bold
%%IncludeResource: font Times-Roman
%%IncludeResource: font Symbol
%%IncludeResource: font Courier-BoldOblique
%%BeginResource: encoding ISO-8859-1Encoding
/ISO-8859-1Encoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclam /quotedbl /numbersign /dollar /percent /ampersand /quoteright 
/parenleft /parenright /asterisk /plus /comma /minus /period /slash 
/zero /one /two /three /four /five /six /seven 
/eight /nine /colon /semicolon /less /equal /greater /question 
/at /A /B /C /D /E /F /G 
/H /I /J /K /L /M /N /O 
/P /Q /R /S /T /U /V /W 
/X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore 
/quoteleft /a /b /c /d /e /f /g 
/h /i /j /k /l /m /n /o 
/p /q /r /s /t /u /v /w 
/x /y /z /braceleft /bar /braceright /asciitilde /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclamdown /cent /sterling /currency /yen /brokenbar /section 
/dieresis /copyright /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron 
/degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph /bullet 
/cedilla /onesuperior /ordmasculine /guillemotright /onequarter /onehalf /threequarters /questiondown 
/Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla 
/Egrave /Eacute /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis 
/Eth /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply 
/Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn /germandbls 
/agrave /aacute /acircumflex /atilde /adieresis /aring /ae /ccedilla 
/egrave /eacute /ecircumflex /edieresis /igrave /iacute /icircumflex /idieresis 
/eth /ntilde /ograve /oacute /ocircumflex /otilde /odieresis /divide 
/oslash /ugrave /uacute /ucircumflex /udieresis /yacute /thorn /ydieresis 
] def
%%EndResource
% Initialize page description variables.
/sh 612 def
/sw 792 def
/llx 24 def
/urx 768 def
/ury 588 def
/lly 24 def
/#copies 1 def
/th 15.000000 def
/fnfs 11 def
/bfs 7.493857 def
/cw 4.496314 def

% Dictionary for ISO-8859-1 support
/iso1dict 8 dict begin
  /fCourier ISO-8859-1Encoding /Courier reencode_font
  /fCourier-Bold ISO-8859-1Encoding /Courier-Bold reencode_font
  /fCourier-BoldOblique ISO-8859-1Encoding /Courier-BoldOblique reencode_font
  /fCourier-Oblique ISO-8859-1Encoding /Courier-Oblique reencode_font
  /fHelvetica ISO-8859-1Encoding /Helvetica reencode_font
  /fHelvetica-Bold ISO-8859-1Encoding /Helvetica-Bold reencode_font
  /fTimes-Bold ISO-8859-1Encoding /Times-Bold reencode_font
  /fTimes-Roman ISO-8859-1Encoding /Times-Roman reencode_font
currentdict end def
/bgcolor [ 0 0 0 ] def
/bg false def
/ul false def
/bx false def
% The font for line numbering
/f# /Helvetica findfont bfs .6 mul scalefont def
/fSymbol /Symbol findfont def
/hm fnfs 0.25 mul def
/pw
   cw 81.400000 mul
def
/ph
   522.321860 th add
def
/pmw urx llx sub pw 2 mul sub 1 div def
/pmh 0 def
/v 0 def
/x [
  0
  dup pmw add pw add
] def
/y [
  pmh ph add 0 mul ph add
  dup
] def
/scx sw 2 div def
/scy sh 2 div def
/snx urx def
/sny lly 2 add def
/dx llx def
/dy sny def
/fnx scx def
/fny dy def
/lx snx def
/ly ury fnfs 0.8 mul sub def
/sx 0 def
/tab 8 def
/x0 0 def
/y0 0 def
%%EndSetup

%%Page: (1-2) 1
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(//lab3_code.c) c n
(//Vladimir Vesely) N
(//10.29.19) N
() p n
() N
(// lab2_skel.c ) c n
(// R. Traylor) N
(// 9.12.08) N
() p n
(//  HARDWARE SETUP:) c n
(//  PORTA is connected to the segments of the LED display. and to the pushbutton) N
(s.) N
(//  PORTA.0 corresponds to segment a, PORTA.1 corresponds to segement b, etc.) N
(//  PORTB bits 4-6 go to a,b,c inputs of the 74HC138.) N
(//  PORTB bit 7 goes to the PWM transistor base.) N
() p n
(#define) K
( F_CPU 16000000 ) p
(// cpu speed in hertz ) c n
(#define) K
( TRUE 1) p n
(#define) K
( FALSE 0) p n
(#include) K
( <avr/io.h>) p n
(#include) K
( <avr/interrupt.h>) p n
(#include) K
( <util/delay.h>) p n
() N
(//holds data to be sent to the segments. logic zero turns segment on) c n
(uint8_t segment_data[5];) p n
() N
(//decimal to 7-segment LED display encodings, logic "0" turns on segment) c n
(// Port mapping:) N
(// Port A:  bit0 segment A) N
(//          bit1 segment B) N
(//          bit2 segment C) N
(//          bit3 segment D) N
(//          bit4 segment E) N
(//          bit5 segment F) N
(//          bit6 segment G) N
(//          bit7 decimal point) N
() p n
(volatile) K
( uint8_t dec_to_7seg[12];) p n
(volatile) K
( uint8_t past_astate[2];) p n
(volatile) K
( uint8_t alarm_state[2];) p n
(volatile) K
( uint8_t acount[2];) p n
(volatile) K
( uint16_t Sme_alarm;) p n
(volatile) K
( uint8_t inc_value;) p n
(volatile) K
( uint8_t add_mode;) p n
() N
() N
(//******************************************************************************) c n
(//                            chk_buttons                                      ) N
(//Checks the state of the button array.  It shifts ones in to a register for eac) N
(h) N
(//button till a button is pushed. Function returns a 1 only once per debounced b) N
(utton    ) N
(//push so a debounce and toggle function can be implemented at the same time.  ) N
(//Adapted to check all buttons from Ganssel's "Guide to Debouncing"            ) N
(//Expects active low pushbuttons on PINA port.  Debounce time is determined by ) N
(//external loop delay times 12. ) N
(//******************************************************************************) N
() p n
(uint8_t chk_buttons\(\) {) N
(        uint8_t check = 0;) N
(        uint8_t inc = 0;) N
(        ) S
(static) K
( uint16_t  state[2] = {0};  ) p
(//holds present state of each pushbutt) c n
(on) N
() p n
() S 8 T () S
(for) K
( \(inc=0; inc < 20; inc++\) {) p n
() S 8 T () S
(for) K
( \(check=0; check < 3; check++\) { ) p
(//shifts each array left by its butt) c n
(on state) N
() p 8 T () S 16 T (state[check-1] = \(state[check-1] << 1\) | \(! bit_is_clear\(PINA, c) N
(heck\)\) | 0xE000; ) N
(lab3_code.c) (Page 1/6) (Nov 06, 19 10:46) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T () S 16 T () S
(if) K
( \(state[check-1] == 0xF000\) ) p
(//return a value when one of the p) c n
(ins has been down for 12 cycles) N
() p 8 T () S 16 T () S 24 T () S 32 T () S
(return) K
( check; ) p
(//returns the pin number that was ) c n
(pulled down, or 0) N
() p 8 T (}) N
() S 8 T (}) N
() S 8 T () S
(return) K
( 0;) p n
(}) N
(//******************************************************************************) c n
() p n
(//******************************************************************************) c n
(*****) N
(//                                   segment_sum                                ) N
(    ) N
(//takes a 16-bit binary input value and places the appropriate equivalent 4 digi) N
(t ) N
(//BCD segment code in the array segment_data for display.                       ) N
(//array is loaded at exit as:  |digit3|digit2|colon|digit1|digit0|) N
(void) k
( segsum\(uint16_t sum\) {) p n
() S 8 T (uint16_t temp = sum;) N
() S 8 T (uint8_t number_items = 0;) N
() S 8 T () S
(//determine how many digits there are ) c n
() p 8 T () S
(//break up decimal sum into 4 digit-segments) c n
() p 8 T () S
(while) K
( \(temp >= 1000\) {) p n
() S 8 T () S 16 T (temp -= 1000;) N
() S 8 T () S 16 T () S
(//increment the number of items) c n
() p 8 T () S 16 T (number_items++;) N
() S 8 T () S 16 T () S
(//set the 1000's output) c n
() p 8 T () S 16 T (segment_data[4] = dec_to_7seg[1];) N
() S 8 T (} ) N
() S 8 T () S
(//0 out digit if it's leading) c n
() p 8 T () S
(if) K
( \(sum < 1000\)) p n
() S 8 T () S 16 T (segment_data[4] = dec_to_7seg[11];) N
() N
() S 8 T (number_items = 0;) N
() S 8 T (segment_data[2] = dec_to_7seg[11];) N
() S 8 T () S
(while) K
( \(temp >= 100\) {) p n
() S 8 T () S 16 T (temp -= 100;) N
() S 8 T () S 16 T () S
(//increment the number of items) c n
() p 8 T () S 16 T (number_items++;) N
() S 8 T (} ) N
() S 8 T () S
(//set the 100's) c n
() p 8 T (segment_data[3] = dec_to_7seg[number_items];) N
() S 8 T () S
(//0 out digit if it's leading) c n
() p 8 T () S
(if) K
( \(sum < 100\)) p n
() S 8 T () S 16 T (segment_data[3] = dec_to_7seg[11];) N
() N
() S 8 T (number_items = 0;) N
() S 8 T () S
(while) K
( \(temp >= 10\) {) p n
() S 8 T () S 16 T (temp -= 10;) N
() S 8 T () S 16 T () S
(//increment the number of items) c n
() p 8 T () S 16 T (number_items++;) N
() S 8 T (} ) N
() S 8 T () S
(//set the 10's output) c n
() p 8 T (segment_data[1] = dec_to_7seg[number_items];) N
() S 8 T () S
(//0 out digit if it's leading) c n
() p 8 T () S
(if) K
( \(sum < 10\)) p n
() S 8 T () S 16 T (segment_data[1] = dec_to_7seg[11];) N
() S 8 T () S
(//set the 1's output) c n
() p 8 T (segment_data[0] = dec_to_7seg[temp];) N
() S 8 T () S
(//blank out leading zero digits ) c n
() p 8 T () S
(//now move data to right place for misplaced colon position) c n
(}) p
(//segment_sum) c n
() p n
(//***********************************************************************       ) c n
(                                                                      ) N
(//                           spi_init                                           ) N
(                                                                   ) N
(//Initalizes the SPI port on the mega128. Does not do any further   ) N
(lab3_code.c) (Page 2/6) (Nov 06, 19 10:46) title
border
grestore
(Printed by Vladimir) rhead
(lab3_code.c) (1/3) (Wednesday November 06, 2019) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (3-4) 2
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(//external device specific initalizations.  Sets up SPI to be:                  ) c n
(      ) N
(//master mode, clock=clk/2, cycle half phase, low polarity, MSB first, interrupt) N
(s enabled) N
(//***********************************************************************       ) N
(                                                                      ) N
(void) k
( spi_init\() p
(void) k
(\) {) p n
() S 8 T () S
(//set portb bit 2 as output to drive the output to allow it to drive the) c n
( clock) N
() p 8 T (DDRB |= \(\(1 << PB7\) | \(1 << PB2\) | \(1 << PB1\) | \(1 << PB0\)\);) S
(//output mod) c n
(e for SS, MOSI, SCL) N
() p 8 T (DDRD |= \(1 << PD2\); ) S
(//make PORTD3 a ground for the encoders) c n
() p 8 T (SPCR = 0b01010000; ) S
(//master mode, clk low on idle, leading edge sample, ) c n
(1/2 speed clk) N
() p 8 T (SPSR = 0b00000001; ) S
(//choose double speed operation) c n
(}) p n
() N
(//***********************************************************************       ) c n
(                                                                      ) N
(//                           init_tcnt0                                         ) N
(                                                                      ) N
(//Initalize tcnt0 counter for interrupt to trigger every 0.25 ms) N
(//***********************************************************************       ) N
(                                                                      ) N
( ) p n
(void) k
( init_tcnt0\(\){                                                              ) p n
(                                                                      ) N
(  ASSR  |=  \(1<<AS0\);                ) S
(//run off external 32khz osc \(TOSC\)        ) c n
(                                                                      ) N
(  ) p
(//enable interrupts for normal mode, overflow) c n
(  ) p
(//timer counter 0 setup, running off i/o clock) c n
(  TIMSK |= \(1<<OCIE0\);             ) p
(//enable interrupts) c n
(  TCCR0 |= \(\(1<<CS00\)\);) p
(//| \(1<<CS01\)\);  //normal mode, prescale by 8) c n
(  OCR0 = 1; ) p
(//32khz / 8 = 0.25 ms period) c n
(}                                                                               ) p n
(                                                                      ) N
() N
(//***********************************************************************       ) c n
(                                                                      ) N
(//                           init_general) N
(//Initalizes coded values for display on seven seg, alarm values to ensure good) N
(//starting logic in state machine, global interrupt) N
(//***********************************************************************       ) N
(                                                                      ) N
(void) k
( init_general\(\) {) p n
() S 8 T () N
() S 8 T (DDRD |= \(1 << PD4\); ) S
(//make PORTD3 a ground for the encoders) c n
() p 8 T (PORTD &= ~\(1 << PD4\);) N
() S 8 T () S
(//NOTE: PB3 has some sort of error.  when I set it to act as) c n
() p 8 T () S
(// an output, it prevents me from using PB2.  ) c n
() p 8 T () S
(//set port bits 4-7 B as outputs for LED decoder) c n
() p 8 T (DDRB |= \(\(1 << PB2\) | \(1 << PB4\) | \(1 << PB5\) | \(1 << PB6\) | \(1 << PB7\)\)) N
(;) N
() S 8 T (PORTB &= ~\(1<<7\);    ) S
(// set PB7 low so it acts like gnd) c n
() p n
() S 8 T () S
(//set pins E 6 and 7 to output) c n
() p 8 T () S
(//crontrols the register load and shift out commands) c 64 T () N
() p 8 T (DDRE |= \(\(1 << PE6\) | \(1 << PE7\)\);) N
(                    ) S 24 T ( ) S
(//PGFEDCBA) c n
(        dec_to_7seg[0] = 0b11000000; ) p
(//0  ) c n
(        dec_to_7seg[1] = 0b11111001; ) p
(//1                                        ) c n
(                                                                      ) N
(        dec_to_7seg[2] = 0b10100100; ) p
(//2                                        ) c n
(                                                                      ) N
(        dec_to_7seg[3] = 0b10110000; ) p
(//3                                        ) c n
(                                                                      ) N
(        dec_to_7seg[4] = 0b10011001; ) p
(//4                                        ) c n
(                                                                      ) N
(        dec_to_7seg[5] = 0b10010010; ) p
(//5                                        ) c n
(lab3_code.c) (Page 3/6) (Nov 06, 19 10:46) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(                                                                      ) c n
(        dec_to_7seg[6] = 0b10000010; ) p
(//6                                        ) c n
(                                                                      ) N
(        dec_to_7seg[7] = 0b11111000; ) p
(//7                                        ) c n
(                                                                      ) N
(        dec_to_7seg[8] = 0b10000000; ) p
(//8                                        ) c n
(                                                                      ) N
(        dec_to_7seg[9] = 0b10010000; ) p
(//9                                        ) c n
(                                                                      ) N
(        dec_to_7seg[10] = 0b11111100; ) p
(//colon                                   ) c n
(                                                                      ) N
(        dec_to_7seg[11] = 0b11111111; ) p
(//no digit                                ) c n
(                                                                      ) N
() p n
() S 8 T (alarm_state[0] = 3;    ) S
(//set initial alarm states to make sure we don't ) c n
(begin with wack values) N
() p 8 T (acount[0] = 0;) S
(// no acSon    ) c n
() p 8 T (alarm_state[1] = 3;    ) N
() S 8 T (acount[1] = 0;) S
(// no acSon    ) c n
() p 8 T (inc_value = 0;) N
() S 8 T (add_mode= 0;) N
() S 8 T (Sme_alarm = 0;) N
(}) N
() N
(//***********************************************************************       ) c n
(                                                                      ) N
(//                     ISR for timer counter zero                               ) N
(                                                                      ) N
(//***********************************************************************       ) N
(                                                                      ) N
(ISR\(TIMER0_COMP_vect\){) p n
() S 8 T () S
(//store digit display before sending it) c n
() p 8 T (uint8_t temp = PORTB;) N
() S 8 T (uint8_t temp_digits = PORTA;) N
() S 8 T () S
(//check portA for button presses) c n
() p 8 T (DDRA = 0x00;                                                            ) N
(                                                              ) N
() S 8 T (PORTA = 0xff;                                                           ) N
(                                                              ) N
() S 8 T () S
(//enable tristate buffer for pushbutton switches                        ) c n
(                                                              ) N
() p 8 T (PORTB |= \(\(1 << PB4\) | \(1 << PB5\) | \(1 << PB6\)\);                        ) N
(                                                              ) N
() S 8 T () S
(//now check each button and increment the count as needed               ) c n
(                                                              ) N
() p 8 T () S
(//If porta pin 1 is pressed, flip the increment 2 flag) c n
() p 8 T () S
(//If porta pin 2 is pressed, flip the increment 4 flag) c n
() p 8 T () S
(//XOR so that previously enabled states will be disabled by another butt) c n
(on press) N
() p 8 T (add_mode ^= chk_buttons\(\);) N
() S 8 T (add_mode &= 0b00000011; ) S
(// remove extra 1's) c n
() p 8 T (PORTA = temp_digits;                                                    ) N
(                                                                     ) N
() S 8 T () S
(//disable tristate buffer for pushbutton switches                       ) c n
(                                                              ) N
() p 8 T (PORTB &= ~\(1 << PB4\);                                                   ) N
(                                                              ) N
() S 8 T () S
(//send indiciactor light patterns to the bar graph via SPI) c n
() p 8 T () S
(//\(inc_value will be added to the current total for each encoder tick\)) c n
() p 8 T () S
(switch) K
(\(add_mode\) {) p n
() S 8 T () S 16 T () S
(case) K
( 0: SPDR = 0x00; inc_value = 1; ) p
(break) K
(;) p n
() S 8 T () S 16 T () S
(case) K
( 1:) p 24 T (SPDR = 0x01; inc_value = 2; ) S
(break) K
(;) p n
() S 8 T () S 16 T () S
(case) K
( 2:) p 24 T (SPDR = 0x02; inc_value = 4; ) S
(break) K
(;) p n
() S 8 T () S 16 T () S
(case) K
( 3:) p 24 T (SPDR = 0x03; inc_value = 0; ) S
(break) K
(;) p n
() S 8 T (}) N
() S 8 T () S
(// Wait for reception complete ) c n
() p 8 T () S
(while) K
( \(bit_is_clear\(SPSR, SPIF\)\){}) p n
() S 8 T (PORTD |= \(1 << PD2\);) N
() S 8 T (PORTD &= ~\(1 << PD2\);) N
(lab3_code.c) (Page 4/6) (Nov 06, 19 10:46) title
border
grestore
(Printed by Vladimir) rhead
(lab3_code.c) (2/3) (Wednesday November 06, 2019) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (5-6) 3
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T (PORTE &= ~\(1 << PE7\);  ) S
(//turn off inhibitor) c n
() p 8 T () S
(//PORTE |= \(1 << PE7\);  //turn off the clock inhibitor) c n
() p 8 T (PORTE &= ~\(1 << PE6\);  ) S
(//enable the encoder load output command) c n
() p 8 T (PORTE |= \(1 << PE6\);  ) S
(//enable the encoder load output command) c n
() p 8 T () S
(//send dummy value to SPDR to allow it to recieve values ) c n
() p 8 T (SPDR = 0xff;) N
() S 8 T () S
(while) K
( \(bit_is_clear\(SPSR, SPIF\)\);) p n
() S 8 T (uint8_t spi_input = SPDR;) N
() S 8 T () S
(//send saved pattern back to the LED display) c n
() p 8 T (PORTB = temp;) N
() S 8 T () S
(//Filter out voltage values for each encoder) c n
() p 8 T (uint8_t encoder[2];) N
() S 8 T (encoder[0] = 0b00000011 & spi_input;) N
() S 8 T (encoder[1] = 0b00001100 & spi_input;) N
() S 8 T () S
(if) K
( \(encoder[1] != 0\)) p n
() S 8 T () S 16 T (encoder[1] = encoder[1] >> 2;) N
() S 8 T () S
(//check for state transisions indicating rotation for each encoder) c n
() p 8 T () S
(int) k
( i;) p n
() S 8 T () S
(for) K
( \(i = 0; i < 2; i++\) {) p n
() S 8 T () S 16 T () S
(//switch statement originally from slides on debouncing encoder ) c n
(inputs) N
() p 8 T () S 16 T (alarm_state[i] = encoder[i];) N
() S 8 T () S 16 T () S
(switch) K
(\(encoder[i]\){ ) p n
() S 8 T () S 16 T () S 24 T () S
(//3 2 0 1 - > 3 CW) c n
() p 8 T () S 16 T () S 24 T () S
(//3 1 0 2 - > 3 CCW) c n
() p 8 T () S 16 T () S 24 T () S
(case) K
( 0:    ) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S
(if) K
(\(past_astate[i] == 2\){acount[i]++;} ) p
(// CW    ) c n
() p 8 T () S 16 T () S 24 T () S 32 T () S
(if) K
(\(past_astate[i] == 1\){--acount[i];} ) p
(// CCW    ) c n
() p 8 T () S 16 T () S 24 T () S 32 T () S
(if) K
(\(encoder[i] == 1\){alarm_state[i] = 1;}    ) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S
(if) K
(\(encoder[i] == 2\){alarm_state[i] = 2;}  ) p
(break) K
(;) p n
() S 8 T () S 16 T () S 24 T () S 32 T (past_astate[i] = encoder[i];) N
() S 8 T () S 16 T () S 24 T () S 32 T () S
(break) K
(; ) p n
() S 8 T () S 16 T () S 24 T () S
(case) K
( 1:) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S
(if) K
(\(past_astate[i] == 0\){acount[i]++;} ) p
(// CW    ) c n
() p 8 T () S 16 T () S 24 T () S 32 T () S
(if) K
(\(past_astate[i] == 3\){--acount[i];} ) p
(// CCW    ) c n
() p 8 T () S 16 T () S 24 T () S 32 T () S
(if) K
(\(encoder[i] == 3\){alarm_state[i] = 3;}    ) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S
(if) K
(\(encoder[i] == 0\){alarm_state[i] = 0;} ) p
(break) K
(;) p n
() S 8 T () S 16 T () S 24 T () S
(case) K
( 2:) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S
(if) K
(\(past_astate[i] == 3\){acount[i]++;} ) p
(// CW    ) c n
() p 8 T () S 16 T () S 24 T () S 32 T () S
(if) K
(\(past_astate[i] == 0\){--acount[i];} ) p
(// CCW    ) c n
() p 8 T () S 16 T () S 24 T () S 32 T (past_astate[i] = alarm_state[i];    ) N
() S 8 T () S 16 T () S 24 T () S 32 T () S
(if) K
(\(encoder[i] == 0\){alarm_state[i] = 0;}    ) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S
(if) K
(\(encoder[i] == 3\){alarm_state[i] = 3;} ) p
(break) K
(; ) p n
() S 8 T () S 16 T () S 24 T () S
(case) K
( 3:) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S
(if) K
(\(past_astate[i] == 1\){acount[i]++;}    ) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S
(if) K
(\(past_astate[i] == 2\){--acount[i];}    ) p n
() S 8 T () S 16 T () S 24 T () S 32 T (past_astate[i] = alarm_state[i];    ) N
() S 8 T () S 16 T () S 24 T () S 32 T () S
(if) K
(\(\(acount[i] >= 1\) && \(acount[i] <100\)\){ ) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (Sme_alarm += inc_value;) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S
(//bound the count to 0 - 1023;) c n
() p 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S
(if) K
(\(Sme_alarm > 1023\){Sme_alarm = 1;}) p n
() S 8 T () S 16 T () S 24 T () S 32 T (} ) N
() S 8 T () S 16 T () S 24 T () S 32 T () S
(if) K
(\(\(acount[i] <= 0xFF\) && \(acount[i] > 0x90\)\){ ) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (Sme_alarm -= inc_value; ) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S
(//bound the count to 0 - 1023) c n
() p 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S
(if) K
(\(Sme_alarm > 1023\){Sme_alarm = 1023;}) p n
() S 8 T () S 16 T () S 24 T () S 32 T (}    ) N
() S 8 T () S 16 T () S 24 T () S 32 T (acount[i] = 0;     ) N
() S 8 T () S 16 T () S 24 T () S 32 T () S
(if) K
(\(encoder[i] == 2\){alarm_state[i] = 2;}) p
(// CW   ) c n
( ) N
() p 8 T () S 16 T () S 24 T () S 32 T () S
(if) K
(\(encoder[i] == 1\){alarm_state[i] = 1;}) p
(// CCW  ) c n
(  ) N
() p 8 T () S 16 T () S 24 T () S 32 T () S
(if) K
(\(encoder[i] == 0\){alarm_state[i] = 0;} ) p
(break) K
(; ) p n
() S 8 T () S 16 T () S 24 T () S
(default) K
(:    ) p n
() S 8 T () S 16 T () S 24 T () S 32 T (alarm_state[i] = 3;    ) N
() S 8 T () S 16 T () S 24 T () S 32 T (acount[i] = 0;) S
(// no acSon) c n
() p 8 T () S 16 T () S 24 T () S 32 T (past_astate[i] = encoder[i];    ) N
() S 8 T () S 16 T (}) S
(// switch  ) c n
() p 8 T () S 16 T (past_astate[i] = alarm_state[i];) N
(lab3_code.c) (Page 5/6) (Nov 06, 19 10:46) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T (}) N
() S 8 T () S
(//sets the 7seg display output based on sum of the count so far) c n
() p 8 T () S
(//break up the disp_value to 4, BCD digits in the array: call \(segsum\)) c n
() p 8 T (segsum\(Sme_alarm\);) N
(}) N
() N
(int) k
( main\(\) {) p n
() S 8 T (uint8_t display_count = 1;) N
() S 8 T (uint8_t i;) N
() S 8 T () S
(//set up interrupt vector) c n
() p 8 T (init_tcnt0\(\);   ) S
(//initalize timer counter zero) c n
() p 8 T (spi_init\(\);   ) S
(//initalize spi ) c n
() p 8 T (init_general\(\); ) S
(//initalize all other widely used items) c n
() p 8 T (sei\(\);          ) S
(//enable global interrupts) c n
(        uint8_t digit;                                                          ) p n
(                                                                      ) N
(        uint8_t dec_set[5];                                                     ) N
(                                                                      ) N
(        dec_set[0] = 0b00000000; ) S
(//sets the first bjt to low / saturation       ) c n
(                                                                      ) N
(        dec_set[1] = 0b00010000; ) p
(//sets the second bjt to low / saturation      ) c n
(                                                                      ) N
(        dec_set[2] = 0b00100000; ) p
(//sets the third bjt to low / saturation       ) c n
(                                                                      ) N
(        dec_set[3] = 0b00110000; ) p
(//sets the fourth bjt to low / saturation      ) c n
(                                                                      ) N
() p 8 T (dec_set[4] = 0b01000000; ) S
(//sets the fifth bjt to low / saturation) c n
() p 8 T () S
(while) K
(\(1\){                                                               ) p n
(                                                                      ) N
(                ) S
(//make PORTA an input port with pullups                         ) c n
(                                                                      ) N
(                ) p
(//do this initalization only just before using the ports!!!!    ) c n
(                                                                      ) N
(                ) p
(//bind a counter \(0-4\) to keep track of digit to display        ) c n
(                                                                     ) N
(                digit = 0;                                                      ) p n
(                                                                      ) N
(                ) S
(//make PORTA an output                                          ) c n
(                                                                      ) N
(                DDRA = 0xff;                                                    ) p n
(                                                                      ) N
(                ) S
(//send 7 segment code to LED segments                           ) c n
(                                                                      ) N
(                ) p
(//send PORTB the digit to display                               ) c n
(                                                                      ) N
(                ) p
(//iterate, turning on each digit / led array) c n
(                ) p
(for) K
( \(digit; digit < 5; digit++\) {                               ) p n
(                                                                      ) N
(                        PORTB &= 0x0f;                                          ) N
(                               ) N
(                        PORTB |= dec_set[digit];                                ) N
(                                         ) N
() S 8 T () S 16 T () S 24 T (PORTA = segment_data[digit];) N
(                        _delay_us\(200\);                                         ) N
(                                                                        ) N
() S 8 T () S 16 T (}) N
(        }) S
(//while                                                                ) c n
(                                                                      ) N
(        ) p
(return) K
( 0;        ) p n
(}) S
(//main) c n
(lab3_code.c) (Page 6/6) (Nov 06, 19 10:46) title
border
grestore
(Printed by Vladimir) rhead
(lab3_code.c) (3/3) (Wednesday November 06, 2019) footer
end % of iso1dict
pagesave restore
showpage

%%Trailer
end
%%EOF
